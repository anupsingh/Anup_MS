package com.example;

import org.apache.mina.filter.ssl.KeyStoreFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.security.oauth2.resource.JwtAccessTokenConverterConfigurer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;
import org.springframework.security.rsa.crypto.KeyStoreKeyFactory;

import com.jcraft.jsch.KeyPair;

@Configuration
public class MSLoginSecurityConfiguration extends WebSecurityConfigurerAdapter {

	@Autowired
	private AuthenticationManager authenticationManager;
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {
		// TODO Auto-generated method stub
		http.formLogin().loginPage("/login").permitAll()
		.and().authorizeRequests().anyRequest().authenticated();
	}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		// TODO Auto-generated method stub
		auth.parentAuthenticationManager(authenticationManager);
	}
	
	protected static class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter{
		
		@Autowired
		private AuthenticationManager authenticationManager;
		
		@Bean
		public JwtAccessTokenConverterConfigurer jwtAccessTokenConverter(){
			JwtAccessTokenConverter converter=new JwtAccessTokenConverter();
			KeyPair keyPair=new KeyStoreKeyFactory(new ClassPathResource("keystroke.jks"), "foobar".toCharArray());
			
		}
	}
	
}
